create table transactions (
	transaction_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	product_id integer,
	customer_id integer,
	transaction_date varchar(30),
	online_order varchar(30),
	order_status varchar(30),
	brand varchar(30),
	product_line varchar(30),
	product_class varchar(30),
	product_size varchar(30),
	list_price real,
	standard_cost real
);

create table customer (
	customer_id integer primary key,
	first_name varchar(50),
	last_name varchar(50),
	gender varchar(30),
	dob varchar(50),
	job_title varchar(50),
	job_industry_category varchar(50),
	wealth_segment varchar(50),
	deceased_indicator varchar(50),
	owns_car varchar(30),
	address varchar(50),
	postcode varchar(30),
	state varchar(30),
	country varchar(30),
	property_valuation integer
);

ALTER TABLE transactions ADD FOREIGN KEY (customer_id) REFERENCES customer (customer_id);

select * from transactions t; 

select * from customer c;

-- Вывести распределение (количество) клиентов по сферам деятельности, отсортировав результат по убыванию количества.

select job_industry_category, count(*)
from customer c 
group by job_industry_category 
order by count(*) desc;

-- Найти сумму транзакций за каждый месяц по сферам деятельности, отсортировав по месяцам и по сфере деятельности.
--вариант 1

select date_trunc('month', transactions.transaction_date::date) AS order_month,
	customer.job_industry_category,
	sum(transactions.list_price) AS sum_transactions
FROM transactions
join customer ON transactions.customer_id = customer.customer_id
group by date_trunc('month', transactions.transaction_date::date), job_industry_category
order by order_month, job_industry_category asc;

--вариант 2

select customer.job_industry_category,
	date_trunc('month', transactions.transaction_date::date) AS order_month,
	sum(transactions.list_price) AS sum_transactions
FROM transactions
join customer ON transactions.customer_id = customer.customer_id
group by job_industry_category, date_trunc('month', transactions.transaction_date::date)
order by job_industry_category asc, order_month asc;

-- Вывести количество онлайн-заказов для всех брендов в рамках подтвержденных заказов клиентов из сферы IT.

with customer_IT as (
	select *
	from customer
	where job_industry_category = 'IT'
),
transactions_order as (
	select *
	from transactions
	where order_status = 'Approved'
)
select count(transaction_id)
from customer_IT
join transactions_order on customer_IT.customer_id = transactions_order.customer_id 
where online_order = 'True' and brand is not null;

/* Найти по всем клиентам сумму всех транзакций (list_price), максимум, минимум и количество транзакций, 
 * отсортировав результат по убыванию суммы транзакций и количества клиентов. 
 * Выполните двумя способами: используя только group by и используя только оконные функции.
*/

-- вариант group by

select customer_id,
	sum(list_price) as sum_transaction,
	max(list_price) as max_transaction,
	min(list_price) as min_transaction,
	count(customer_id) as count_customer
from transactions
group by customer_id
order by sum_transaction desc, count_customer desc;
	
-- вариант оконные функции

SELECT customer_id,
	sum(list_price) over (partition by customer_id) as sum_transaction,
	max(list_price) over (partition by customer_id) as max_transaction,
	min(list_price) over (partition by customer_id) as mix_transaction,
	count(*) over (partition by customer_id) as count_customer
from transactions
order by sum_transaction desc, count_customer desc;
	
-- Найти имена и фамилии клиентов с минимальной/максимальной суммой транзакций за весь период 
-- (сумма транзакций не может быть null). Напишите отдельные запросы для минимальной и максимальной суммы. 

-- клиент с максимальной суммой транзакции

with customer_group as (
	select customer_id,
	sum(list_price) as sum_transaction
	from transactions
	group by customer_id
) 
select first_name, last_name, customer_group.customer_id, sum_transaction
from customer
join customer_group on customer.customer_id = customer_group.customer_id
order by sum_transaction desc
limit 1
	
-- клиент с минимальной суммой транзакции

with customer_group as (
	select customer_id,
	sum(list_price) as sum_transaction
	from transactions
	group by customer_id
) 
select first_name, last_name, customer_group.customer_id, sum_transaction
from customer
join customer_group on customer.customer_id = customer_group.customer_id
order by sum_transaction asc
limit 1

-- Вывести только самые первые транзакции клиентов. Решить с помощью оконных функций.

select *
from (
	select 
		date_trunc('month', transactions.transaction_date::date),
		customer_id,
		transaction_id,
		list_price,
		row_number() over(partition by customer_id order by date_trunc('month', transactions.transaction_date::date)) as number
	from transactions
)
where number = 1

-- Вывести имена, фамилии и профессии клиентов, между транзакциями которых был максимальный интервал (интервал вычисляется в днях)

with day_amount as (
	select 
		customer_id,
		transaction_date::date as transaction_date,
		lag(transaction_date::date) over(partition by customer_id order by transaction_date::date) as lag_date,
		lead(transaction_date::date) over(partition by customer_id order by transaction_date::date) as lead_date,
		(lead(transaction_date::date) over(partition by customer_id order by transaction_date::date) - transaction_date::date) as different
	from transactions
	order by customer_id, transaction_date
)
select 
	first_name,
	last_name,
	job_title,
	max(different) over (partition by day_amount.customer_id) as max_dif
from day_amount
join customer on day_amount.customer_id = customer.customer_id
where different is not null
order by max_dif desc
limit 1














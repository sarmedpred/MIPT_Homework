create table "Transactions" (
  "transaction_id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "product_id" integer not null,
  "customer_id" integer not null,
  "transaction_date" varchar(30) not null,
  "online_order" varchar(30),
  "order_status" varchar(30) not null,
  "brand" varchar(30),
  "product_line" varchar(30),
  "product_class" varchar(30),
  "product_size" varchar(30),
  "list_price" real,
  "standard_cost" real
);
 
create table "Customer" (
  "customer_id" integer primary key,
  "first_name" varchar(50),
  "last_name" varchar(50),
  "gender" varchar(30),
  "DOB" varchar(50),
  "job_title" varchar(50),
  "job_industry_category" varchar(50),
  "wealth_segment" varchar(50),
  "deceased_indicator" varchar(50),
  "owns_car" varchar(30),
  "address" varchar(50) not null,
  "postcode" varchar(30),
  "state" varchar(30) not null,
  "country" varchar(30) not null,
  "property_valuation" integer  
);

ALTER TABLE "Transactions" ADD FOREIGN KEY ("customer_id") REFERENCES "Customer" ("customer_id");

select * from "Customer";

select * from "Transactions";

-- Вывести все уникальные бренды, у которых стандартная стоимость выше 1500 долларов

select distinct "brand" from "Transactions" 
where "standard_cost">1500;

-- Вывести все подтвержденные транзакции за период '2017-04-01' по '2017-04-09' включительно

select * from "Transactions"
where "order_status"='Approved' and to_date("transaction_date", 'DD.MM.YYYY') between '01.04.2017' and '09.04.2017';

-- Вывести все профессии у клиентов из сферы IT или Financial Services, которые начинаются с фразы 'Senior'

select "job_title" from "Customer"
where "job_industry_category" in ('IT', 'Financial Services')
and "job_title" like 'Senior%';

-- Вывести все бренды, которые закупают клиенты, работающие в сфере Financial Services

select 'financial_job' as "work_in_fin_service_buy_brand"
from "Customer"
where "job_industry_category"='Financial Services'
union
select "brand"
from "Transactions";

-- Вывести 10 клиентов, которые оформили онлайн-заказ продукции из брендов 'Giant Bicycles', 'Norco Bicycles', 'Trek Bicycles'

select "Customer".customer_id, first_name, last_name, brand, online_order
from "Customer"
inner join "Transactions" on ("Customer".customer_id = "Transactions".customer_id)
where ("Transactions".brand in ('Giant Bicycles', 'Norco Bicycles', 'Trek Bicycles')) 
and ("Transactions".online_order = 'True') 
limit 10;

--  Вывести всех клиентов, у которых нет транзакций 

select "Customer".customer_id, first_name, last_name, transaction_id 
from "Customer"
left join "Transactions" on ("Customer".customer_id = "Transactions".customer_id)
where "Transactions".customer_id is null;

-- Вывести всех клиентов из IT, у которых транзакции с максимальной стандартной стоимостью.

with "Customer_IT" as (
	select *
	from "Customer"
	where job_industry_category = 'IT'
)
select "Customer_IT".customer_id, first_name, last_name, job_industry_category, standard_cost 
from "Customer_IT"
left join "Transactions" on ("Customer_IT".customer_id = "Transactions".customer_id)
where "Transactions".standard_cost = (
	select max(standard_cost)
	from "Transactions"
);

-- Вывести всех клиентов из сферы IT и Health, у которых есть подтвержденные транзакции за период '2017-07-07' по '2017-07-17'.

with "Customer_IT_Health" as (
	select *
	from "Customer"
	where job_industry_category in ('IT', 'Health')
)
select "Customer_IT_Health".customer_id, first_name, last_name, job_industry_category, order_status, transaction_date
from "Customer_IT_Health"
left join "Transactions" on ("Customer_IT_Health".customer_id = "Transactions".customer_id)
where "Transactions".order_status = 'Approved' 
and to_date("transaction_date", 'DD.MM.YYYY') between  '07.07.2017' and '16.07.2017';





  

